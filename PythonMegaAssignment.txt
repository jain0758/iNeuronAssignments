## Assignment Part-1
Q1. Why do we call Python as a general purpose and high-level programming language?
-> It can be used to create variety of diff programs and is not specialized for any specifc problem. Hence called general purpose language. 

Q2. Why is Python called a dynamically typed language?
-> Unlike C/C++/Java where it is mandatory ot declare and provide type of variable before is assigned any value, Python does not have any problem even if you dont declare the type of variable. Here type of variable is determined at run time depending on what is stored into allocated bind memory location to the variable. We can say declaring a variable is of no use in Python.

Q3. List some pros and cons of Python programming language?
-> PROS : 
    - Beginner friendliness, 
    - Versatile, 
    - Open source, 
    - Large and active community support
   CONS : 
    - Slow Speed (since it is interpreted and dynamically types), 
    - Inefficient memory use(this comes due to providing simplicity to programmers). It consumes lot of memory 

Q4. In what all domains can we use Python?
-> Website development/softwares, task automation, data analysis, machine learning, Everyday tasks

Q5. What are variable and how can we declare them?
-> variable are the names given to memory location. By these we can access the value held at that memomy location.

Q6. How can we take an input from the user in Python?
-> input() function

Q7. What is the default datatype of the value that has been taken as an input using input() function?
-> str

Q8. What is type casting?
-> converting data from one type to another

Q9. Can we take more than one input from the user using single input() function? If yes, how? If no, why?

x, y = input("Enter two values separated by space ").split()
print("Number of boys: ", x)
print("Number of girls: ", y)

Q10. What are keywords?
-> these are reserved words by programming language used while giving instruction via program

Q11. Can we use keywords as a variable? Support your answer with reason.
-> No. This is because how will interpreter distinguish between keyword and variables

Q12. What is indentation? What's the use of indentaion in Python?
-> In Python world Indentation is used to specify blocks with in the code. This allows python to separate one logical block of code with another

Q13. How can we throw some output in Python?
-> print() function

Q14. What are operators in Python?
-> Numerical operators, Assignment operators, Comparison Operators, Logical Operators

Q15. What is difference between / and // operators?
-> / is used for float division and // is used for integer division

Q16. Write a code that gives following as an output.
```
iNeuroniNeuroniNeuroniNeuron
```
str_ineuron = "iNeuron"
for num in range(1,4):
    str_ineuron = str_ineuron + "iNeuron"
print(str_ineuron)

Q17. Write a code to take a number as an input from the user and check if the number is odd or even.

int_num = int(input("Enter the number : "))
if (int_num % 2 == 0):
    print("Number is even")
else:
    print("Number is odd")

Q18. What are boolean operator?
-> Comparison operatos are boolean operators

Q19. What will the output of the following?
```
1 or 0 
-> 1

0 and 0
-> 0

True and False and True
-> false

1 or 0 or 0
-> 1

Q20. What are conditional statements in Python?
-> statement that evaluates a condition and emits result as TRUE or FALSE

Q21. What is use of 'if', 'elif' and 'else' keywords?
-> these are conditional statements used to evaluates conditions

Q22. Write a code to take the age of person as an input and if age >= 18 display "I can vote". If age is < 18 display "I can't vote".

int_age = int(input("Enter the age : "))
if(int_age >= 18):
    print("I can vote")
else:
    print("I can't vote")

Q23. Write a code that displays the sum of all the even numbers from the given list.

numbers = [12, 75, 150, 180, 145, 525, 50]
sum_of_even_nums = 0
for num in numbers:
    if(num % 2 == 0):
        sum_of_even_nums = sum_of_even_nums + num
print("Sum of even numbers = ",sum_of_even_nums)

Q24. Write a code to take 3 numbers as an input from the user and display the greatest no as output.

first_num = int(input("Enter first number = "))
second_num = int(input("Enter second number = "))
third_num = int(input("Enter third number = "))
if(first_num > second_num):
    if(first_num > third_num):
        print("First number is greatest = ",first_num)
    else:
        print("Third number is greatest = ",third_num)   
elif(second_num > third_num):
    print("Second number is greatest = ",second_num)
else:
    print("Third number is greatest = ",third_num)

Q25. Write a program to display only those numbers from a list that satisfy the following conditions

- The number must be divisible by five

- If the number is greater than 150, then skip it and move to the next number

- If the number is greater than 500, then stop the loop
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
numbers = [12, 75, 150, 180, 145, 525, 50]
for i in numbers:
    if(i % 5 == 5 or i % 5 == 0):
        if(i < 150):
            if(i < 500):
                print(i)
            else:
                break   
        else:
            continue

Q26. What is a string? How can we declare string in Python?
-> string is sequence of consecutive characers. To declare it use syntex like str1 = "str"

Q27. How can we access the string using its index?

str1 = "Hello"
print(str1[2]) # will print 'l;

Q28. Write a code to get the desired output of the following
````
string = "Big Data iNeuron"
desired_output = "iNeuron"
````
string = "Big Data iNeuron"
list1 = string.split(" ")
print(list1[2])

Q29. Write a code to get the desired output of the following
```
string = "Big Data iNeuron"
desired_output = "norueNi"
```
string = "Big Data iNeuron"
iNeuron_str = string.split(" ")[2][::-1]
print(iNeuron_str)

Q30. Resverse the string given in the above question.

string = "Big Data iNeuron"[::-1]
print(string)

Q31. How can you delete entire string at once?

str1 = "anshuman"
print(str1)
del str1
print(str1)

Q32. What is escape sequence?
-> To insert characters that are illegal in a string, use an escape character.

txt = "We are the so-called \"Vikings\" from the north."
print(txt)

Q33. How can you print the below string?

'iNeuron's Big Data Course'
```
string1 = "iNeuron's Big Data Course"
print(string1)
```

Q34. What is a list in Python?
-> it is like array where elements are stored in ordered fasion having index attached to every element

Q35. How can you create a list in Python?

list1 = [1,2,3,4]

Q36. How can we access the elements in a list?

list1 = [1,2,3,4]
print(list1[2]) # will print 3

Q37. Write a code to access the word "iNeuron" from the given list.
```
lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
```
print(lst[4][2])

Q38. Take a list as an input from the user and find the length of the list.

input_string = input('Enter elements of a list separated by space')
user_list = input_string.split()
print('list: ', user_list)

Q39. Add the word "Big" in the 3rd index of the given list.
```
lst = ["Welcome", "to", "Data", "course"]
```
lst[2] = "big"

Q40. What is a tuple? How is it different from list?
-> it is kind of constant list. Once defined its size does not change and can not be altered

Q41. How can you create a tuple in Python?

tuple1 = (1,2,3,4)

Q42. Create a tuple and try to add your name in the tuple. Are you able to do it? Support your answer with reason.
```
tuple1 = (1,2,3,4)
tuple1[2] = "anshuman" # results in TypeError: 'type' object does not support item assignment
```
This is because tuple is immutable. Once defined can not be changed

Q43. Can two tuple be appended. If yes, write a code for it. If not, why?

Q44. Take a tuple as an input and print the count of elements in it.

input_string = input('Enter elements of a list separated by space = ')
user_list = tuple(input_string.split())
print('list: ', user_list)
print(type(user_list))

Q45. What are sets in Python?
-> A kind of collection which store unique data in unordered and unindexed format

Q46. How can you create a set?

user_set = {1,2,3,4,5}
print(type(user_set)) # <class 'set'>

Q47. Create a set and add "iNeuron" in your set.

user_set = set()
print(user_set)
user_set.add("iNeuron")
print(user_set)

Q48. Try to add multiple values using add() function.
-> To add more than one item to a set at once, use the update() method.

color_set = {"read", "blue", "green"}
print(color_set)
color_set.update(["white", "black"])
print(color_set)

Q49. How is update() different from add()?
-> add() does not work with an iterable. 
-> update() : you can pass multiple iterables to it and it will iterate all iterables and will include the individual elements in the set.

Q50. What is clear() in sets?
-> this method removes all elements in once from set

color_set = {"read", "blue", "green"}
print(color_set) # prints {'green', 'blue', 'read'}
color_set.clear()
print(color_set) # prints set()

Q51. What is frozen set?
-> Python frozenset() Method creates an immutable Set object from an iterable. It is a built-in Python function.

Q52. How is frozen set different from set?
-> 'frozenset' object does not support item assignment hence once declared they can not be modified

Q53. What is union() in sets? Explain via code.
-> combines 2 sets and removes duplicate between two
set_a = {1,2,3,4,5,6}
set_b = {3,6,8,9,10}
set_c = set_a.union(set_b)
print("union of set_a and set_b = ",set_c) # {1,2,3,4,5,6,8,9,10}

Q54. What is intersection() in sets? Explain via code.
-> gives common elments between two sets
set_a = {1,2,3,4,5,6}
set_b = {3,6,8,9,10}
set_c = set_a.intersection(set_b)
print("intersection of set_a and set_b = ",set_c) # {3,6}

Q55. What is dictionary in Python?
-> Dictionaries are used to store data values in key:value pairs.
A dictionary is a collection which is changeable and do not allow duplicates.
Dictionaries cannot have two items with the same key.
The values in dictionary items can be of any data type.

Q56. How is dictionary different from all other data structures.
-> Dictionary is a hashed structure of key and value pairs.

Q57. How can we delare a dictionary in Python?

dict1 = {}
print(type(dict1)) # Output will be <class 'dict'>

OR 

dict_via_constructor = dict(name = "John", age = 36, country = "Norway")

Q58. What will the output of the following?
```
var = {}
print(type(var))
```
-> Dictionary

Q59. How can we add an element in a dictionary?

dict2['age'] = 22

Q60. Create a dictionary and access all the values in that dictionary.

dict2['age'] = 22
print("Value against key 'age' = ",dict2['age'])

Q61. Create a nested dictionary and access all the element in the inner dictionary.

dict2['other_details'] = {'color' : 'Black', 'nationality' : 'Indian'}
print("Value against key 'other_details.nationality' = ",dict2['other_details']['nationality'])

Q62. What is the use of get() function?
-> can be used to fetch element from dict

dict2 = {}
dict2['age'] = 22
print(dict2.get("age")) # 22

Q63. What is the use of items() function?
-> return key-value mappings stored in dict
dict2 = {}
dict2['age'] = 22
print(dict2.items()) # dict_items([('age', 22)])

Q64. What is the use of pop() function?
-> removes element from List on provided index

fruits = ['apple', 'banana', 'cherry']
print(fruits) # ['apple', 'banana', 'cherry']
print(fruits.pop(1)) # banana
print(fruits) # ['apple', 'cherry'] 

Remove the second element of the fruit list:
Q65. What is the use of popitems() function?
-> removes last item from dict

dict2 = {}
dict2['age'] = 22
dict2['name'] = "anshuman"
print(dict2) # {'age': 22, 'name': 'anshuman'}
print(dict2.popitem()) # ('name', 'anshuman')
print(dict2) # {'age': 22}

Q66. What is the use of keys() function?
-> returns keys of a dictionary

dict2 = {}
dict2['age'] = 22
print(dict2.keys()) # dict_keys(['age'])

Q67. What is the use of values() function?
-> returns values of dict
dict2 = {}
dict2['age'] = 22
print(dict2.values()) # dict_values([22])

Q68. What are loops in Python?
-> used to an operation mutliple times. 

Q69. How many type of loop are there in Python?
-> for and while

Q70. What is the difference between for and while loops?
-> for knows how many iterations will it do
-> while just have terminating condition hence number of iterations are unknown at beginning

Q71. What is the use of continue statement?
-> continue statement break current iteration and starts the next iteration

Q72. What is the use of break statement?
-> break statement discontinue current iteration and exits from loop

Q73. What is the use of pass statement?
-> The pass statement is used as a placeholder for future code. When the pass statement is executed, nothing happens, but you avoid getting an error when empty code is not allowed. Empty code is not allowed in loops, function definitions, class definitions, or in if statements.

Q74. What is the use of range() function?
-> The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and stops before a specified number.

Syntex : range(start, stop, step) # stop is excluded from this rage 

x = range(3, 20, 2)
for n in x:
  print(n) # will print odd numbers starting from 3 till 19

Q75. How can you loop over a dictionary?

for k,v in dict2.items():
    print("Keys is = ",k, 'and Value is = ',v)

###################
# Coding problems #
###################

Q76. Write a Python program to find the factorial of a given number.

def factorial(num):
    if (num == 0):
        return 1
    else:
        return num * factorial(num-1)

Q77. Write a Python program to calculate the simple interest. Formula to calculate simple interest is SI = (PRT)/100

def simple_interest(principal):
    return principal / 100

Q78. Write a Python program to calculate the compound interest. Formula of compound interest is A = P(1+ R/100)^t.

def compund_interest(principal,interestRate,periodInMonths):
    temp1 = 1 + (interestRate/100)
    temp2 = pow(temp1, periodInMonths)
    return principal * temp2

Q79. Write a Python program to check if a number is prime or not.

def isPrimeNumber(num):
    isPrime = True
    if(num < 2):
        isPrime = False
    elif (num == 2):
        isPrime = True
    else:
        temp = 2
        while(temp <= num/2):
            if(num % temp == 0):
                isPrime = False
                break;
            temp = temp + 1            
    return isPrime

Q80. Write a Python program to check Armstrong Number.

def isArmstrongNumber(num):
    if(num == 1):
        return True
    elif(num < 10):
        return False    
    else:
        temp1 = num
        sum = 0
        while(temp1 > 0):
            remainder = temp1 % 10
            sum = sum + remainder ** 3
            temp1 = temp1 // 10
        if(sum == num):
            return True
        else:
            return False  

Q81. Write a Python program to find the n-th Fibonacci Number.

def nthFabonacciNumber(num):
    first = 0
    second = 1
    if(num == 1):
        return first
    elif(num == 2):
        return second
    else:
        for i in range(3, num+1):
            temp = second
            second = second + first
            first = temp
            if(i == num):
                return second

Q82. Write a Python program to interchange the first and last element in a list.

def swapFirstAndLast(list1):
    firstElement = list1[0]
    lastElement = list1[len(list1)-1]
    list1[0] = lastElement
    list1[len(list1)-1] = firstElement

Q83. Write a Python program to swap two elements in a list.

def swapNumberInList(list1,first,second):
    if(len(list1) == 0):
        return list1
    elif(first < 0 or second > len(list1) -1):
        return list1
    else:
        temp = list1[second]
        list1[second] = list1[first]
        list1[first] = temp
        return list1  

Q84. Write a Python program to find N largest element from a list.

def findNthLargest(list1, nthLargest):
    if(len(list1) == 0):
        return 0
    elif(len(list1) < nthLargest - 1):
        return 0
    else:
        list1.sort()
        return list1[nthLargest-1]

Q85. Write a Python program to find cumulative sum of a list.

def cumulativeSumOfList(list1):
    if(len(list1) == 0):
        return 0
    else:
        sum = 0
        for i in range(0,len(list1)):
            sum = sum + list1[i]
        return sum

Q86. Write a Python program to check if a string is palindrome or not.

def isPalindrome(str1):
    inputStr = str(str1)
    inputStrLength = len(inputStr)
    if(inputStrLength == 0):
        return False
    elif(inputStrLength == 1):
        return True
    else:
        left = 0
        right = inputStrLength - 1
        for i in range(0,inputStrLength//2):
           if(inputStr[left] != inputStr[right]):
                return False
           left = left + 1
           right = right - 1
        return True

Q87. Write a Python program to remove i'th element from a string.

def removeIthElement(str1, index):
    inputStr = str(str1)
    inputStrLen = len(inputStr)
    if(inputStrLen == 0 or index < 0 or (index - 1) > inputStrLen):
        return str1
    else:
        outputStr = str1[:index] + str1[index+1:]    
        return outputStr

Q88. Write a Python program to check if a substring is present in a given string.

def isSubStrAvailable(actualStr, subStr):
    if(actualStr.find(subStr)==-1):
        return False
    else:
        return True

Q89. Write a Python program to find words which are greater than given length k in list.

def find(list1, length):
    if(len(list1) == 0):
        return False
    else:
        outputList = []
        for i in range (0, len(list1)):
            if(len(list1[i]) > length):
                outputList.append(list1[i])
        return outputList

Q90. Write a Python program to extract unique dictionary values.

def findUniqueValuesFromDict(dict1):
    set1 = set()
    for v in dict1.values():
        set1.add(v)
    return set1 

Q91. Write a Python program to merge two dictionary.

def mergeDicts(dict1,dict2):
    for k,v in dict2.items():
        dict1[k] = v

Q92. Write a Python program to convert a list of tuples into dictionary.

Input : [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
Output : {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}

def listOfTupleIntoDictionary(list1):
    if(len(list1) == 0):
        return list1
    else:
        dict1 = {}
        for i in range(0, len(list1)):
            tupleTemp = list1[i]
            dict1[tupleTemp[0]] = tupleTemp[1]
        return dict1

Q93. Write a Python program to create a list of tuples from given list having number and its cube in each tuple.

Input: list = [9, 5, 6]
Output: [(9, 729), (5, 125), (6, 216)]

def listToListOfTuplesHavingQubes(list1):
    if(len(list1) == 0):
        return list1
    else:
        outputList = []
        for i in range(0, len(list1)):
            outputList.append((list1[i], list1[i]**3))
        return outputList

Q94. Write a Python program to get all combinations of 2 tuples.

Input : test_tuple1 = (7, 2), test_tuple2 = (7, 8)
Output : [(7, 7), (7, 8), (2, 7), (2, 8), (7, 7), (7, 2), (8, 7), (8, 2)]

def allCombinationsOfTwoTuples(tuple1, tuple2):
    outputList = []
    for i in range(0, len(tuple1)):
        for k in range(0, len(tuple2)):
            outputList.append((tuple1[i],tuple2[k]))
    for i in range(0, len(tuple2)):
        for k in range(0, len(tuple1)):
            outputList.append((tuple2[i],tuple1[k]))        
    return outputList

Q95. Write a Python program to sort a list of tuples by second item.

Input : [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
Output : [('Geeks', 8), ('for', 24), ('Geeks', 30)]

def sortListOfTuplesBySecondItem(tupleList):
    dic1 = {}
    outputList = []
    # adding tuple elements as value and key as first tuple element into dict
    for i in range(0, len(tupleList)):
        tupleTemp = tupleList[i]
        dic1[tupleTemp[1]] = tupleList[i]
    # fetch keys from map and sort them
    sortedValueList = list(dic1.keys())
    sortedValueList.sort()
    # based on srted key, fetch tuple elements from dict and add into list
    for i in range(0,len(sortedValueList)):
        tempTuple = dic1.get(sortedValueList[i])
        outputList.append(tempTuple)
    # returning output
    return outputList

Q96. Write a python program to print below pattern.

* 
* * 
* * * 
* * * * 
* * * * * 

for i in range(1,6,1):
    for k in range(1,i+1):
        print("*",end=" ")
    print()

Q97. Write a python program to print below pattern.

    *
   **
  ***
 ****
*****

spaces = 4
stars = 1
for i in range(1,6,1):
    for k in range(1,spaces+1):
        print(" ",end="")
    for j in range(1,stars+1):
        print("*",end="")    
    print()
    spaces = spaces - 1
    stars = stars + 1

Q98. Write a python program to print below pattern.

    * 
   * * 
  * * * 
 * * * * 
* * * * * 

spaces = 4
stars = 1
for i in range(1,6,1):
    for k in range(1,spaces+1):
        print(" ",end="")
    for j in range(1,stars+1):
        print("* ",end="")    
    print()
    spaces = spaces - 1
    stars = stars + 1

Q99. Write a python program to print below pattern.

1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5

for i in range(1,6,1):
    for k in range(1,i+1):
        print(k,end=" ")
    print()

Q100. Write a python program to print below pattern.

A 
B B 
C C C 
D D D D 
E E E E E 

list1 = ['A','B','C','D','E']
for i in range(0,5,1):
    for k in range(0,i+1):
        print(list1[i],end=" ")
    print()
